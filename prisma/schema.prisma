// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://alexsekorme:Yqi3WuPBx8Ve5yag@polls.cslibod.mongodb.net/constituency"
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String ?
  username String? @unique
  emailVerified DateTime?
  imageSrc String?
  phone String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt



  accounts Account[]
  polls Polls[]
  headers Headers[]
}

model Account{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?
  

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Polls{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  imageSrc String
  createdAt DateTime @default(now())
  category String
  roomCount Int
  bathroomCount Int
  guestCount Int
  locationValue String
  userId String @db.ObjectId
  prince Int


  user User @relation(fields:[userId], references:[id], onDelete: Cascade)
  headers Headers[]
}


model Headers{
id String @id @default(auto()) @map("_id") @db.ObjectId
 userId String @db.ObjectId
 listingId String @db.ObjectId
 startDate DateTime
 endDate DateTime
 totalPrice Int
 createdAt DateTime @default(now())

 user User @relation(fields:[userId], references:[id], onDelete: Cascade)
 polls Polls @relation(fields: [listingId], references: [id], onDelete: Cascade)
}


// MongoDB Prisma schema for the provided data structure



model DataCollate {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  town String
  pollingStation  PollingStation  @relation(fields: [pollingStationId], references: [id])
  pollingStationId String
}

model PollingStation {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  pollingStationName  String
  ndcVotes            Int
  nppVotes            Int
  cppVotes            Int
  totalVoteCast       Int
  rejectedBallot      Int
  turnedOut           Int
  DataCollate         DataCollate[]
}

model TownNames {
  id    String @id @default(auto()) @map("_id")@db.ObjectId
  town  String
}

model TableHeader {
  id         String @id @default(auto()) @map("_id")@db.ObjectId
  pollStation String
  ndc         String
  npp         String
  cpp         String
  total       String
  rejected    String
  turnedOut   String
  action      String
}